% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simplex_tree.R
\docType{class}
\name{print.simplex_tree}
\alias{print.simplex_tree}
\title{Prints the simplex tree}
\description{
Prints the simplicial complex to standard out. 
By default, this is set to R's buffered output, which is shown in the R console. 
The printed format is: \cr 
\cr
[vertex] (h = [subtree height]): [subtree depth]([subtree]) \cr 
\cr
Where each lists the top node (\emph{vertex}) and its corresponding subtree. The 
\emph{subtree height} displays the highest order k-simplex in that subtree. Each 
level in the subtree tree is a set of sibling k-simplices whose order is given  
by the number of dots ('.') proceeding the print level.
}
\section{Methods}{

\describe{
\item{\code{adjacent(...)}}{std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > adjacent(unsigned long)}

\item{\code{as_adjacency_list()}}{Rcpp::List as_adjacency_list()}

\item{\code{as_adjacency_matrix()}}{Rcpp::Matrix<13, Rcpp::PreserveStorage> as_adjacency_matrix()}

\item{\code{as_edge_list()}}{Rcpp::Matrix<13, Rcpp::PreserveStorage> as_edge_list()}

\item{\code{as_list()}}{Rcpp::List as_list()}

\item{\code{as_XPtr()}}{SEXP as_XPtr()}

\item{\code{clear()}}{void clear()}

\item{\code{collapse(...)}}{bool collapse(std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >)
  
bool collapse(unsigned long, unsigned long, unsigned long)  
  }

\item{\code{contract(...)}}{void contract(std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >)}

\item{\code{degree(...)}}{unsigned long degree(unsigned long)}

\item{\code{deserialize(...)}}{void deserialize(std::__1::vector<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, std::__1::allocator<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > > >)}

\item{\code{find(...)}}{Rcpp::Vector<10, Rcpp::PreserveStorage> find(SEXP)}

\item{\code{generate_ids(...)}}{std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > generate_ids(unsigned long)}

\item{\code{insert(...)}}{void insert(SEXP)}

\item{\code{is_face(...)}}{bool is_face(std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >)}

\item{\code{is_tree()}}{bool is_tree()}

\item{\code{load(...)}}{void load(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)}

\item{\code{ltraverse(...)}}{Rcpp::List ltraverse(Rcpp::Function_Impl<Rcpp::PreserveStorage>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)
  
Rcpp::List ltraverse(SEXP, Rcpp::Function_Impl<Rcpp::PreserveStorage>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)  
  
Rcpp::List ltraverse(SEXP, Rcpp::Function_Impl<Rcpp::PreserveStorage>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Rcpp::Nullable<Rcpp::Vector<19, Rcpp::PreserveStorage> >)  
  }

\item{\code{print_tree()}}{void print_tree()}

\item{\code{remove(...)}}{void remove(SEXP)}

\item{\code{save(...)}}{void save(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)}

\item{\code{serialize()}}{std::__1::vector<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, std::__1::allocator<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > > > serialize()}

\item{\code{traverse(...)}}{void traverse(Rcpp::Function_Impl<Rcpp::PreserveStorage>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)
  
void traverse(SEXP, Rcpp::Function_Impl<Rcpp::PreserveStorage>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)  
  
void traverse(SEXP, Rcpp::Function_Impl<Rcpp::PreserveStorage>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Rcpp::Nullable<Rcpp::Vector<19, Rcpp::PreserveStorage> >)  
  }
}}

