% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simplex_tree.R
\name{traverse.simplex_tree}
\alias{traverse.simplex_tree}
\alias{traverse}
\title{traverse}
\arguments{
\item{sigma}{The simplex to initialize the traversal, or NULL to use the root. See details.}

\item{f}{An arbitrary function which accepts as input a simplex. See details.}

\item{type}{One of "dfs", "bfs", "cofaces", "star", "link", "skeleton", or "maximal-skeleton"}
}
\description{
Traverses subsets of a simplicial complex.
}
\details{
\code{\link{traverse}} allows for traversing subsets of the simplex tree. 
A subset of the simplex tree is represented by a set of simplices. The simplices within each subset is determined by
two aspects: the traversal \code{type} and the initial simplex \code{sigma}. Given a simplex \code{sigma}, a subset of 
the simplex tree is generated based on \code{type}, and then each simplex is passed as the first argument to \code{f}.
See examples for use-cases.
}
\examples{
## Starter example complex 
st <- simplex_tree()
st$insert(c(1, 2, 3))
st$insert(c(2, 3, 4, 5))

## Print out complex using depth-first traversal. NULL implies that the DFS will start at the root. 
st$traverse(NULL, print, "dfs")

## Print of subtree rooted at vertex 1 using depth-first traversal. 
st$traverse(1L, print, "dfs")

## Print simplices in the star of the edge [4, 5]
st$traverse(c(4, 5), print, "star")

## Traversals can be chained. Here's an example that prints the link of each vertex.
st$traverse(function(simplex){
  if (length(simplex) == 1){
    print(sprintf("Link of \%d:", simplex))    
    stree$traverse(simplex, print, "link")
  }
}, "bfs")

## To see the cofaces of a given simplex 
stree <- simplex_tree()
stree$insert_simplex(c(1, 2, 3))
stree$traverse(1L, print, "cofaces")
stree$traverse(2L, print, "cofaces")
stree$traverse(3L, print, "cofaces")
}
